"use strict";(()=>{var e={};e.id=351,e.ids=[351],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},6649:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>h,patchFetch:()=>O,requestAsyncStorage:()=>y,routeModule:()=>f,serverHooks:()=>x,staticGenerationAsyncStorage:()=>N});var r={};s.r(r),s.d(r,{DELETE:()=>w,GET:()=>g,PATCH:()=>m,POST:()=>l});var n=s(9303),a=s(8716),i=s(670),u=s(9487),o=s(3591),d=s(7070),p=s(1185);let c=s(1185).Types.ObjectId,g=async()=>{try{await (0,u.Z)();let e=await o.Z.find();return new d.NextResponse(JSON.stringify(e),{status:200})}catch(e){return new d.NextResponse("Error in fetching users"+e.message,{status:500})}},l=async e=>{try{let t=await e.json();await (0,u.Z)();let s=new o.Z(t);return await s.save(),new d.NextResponse(JSON.stringify({message:"User is created",user:s}),{status:200})}catch(e){return new d.NextResponse("Error in creating user "+e.message,{status:500})}},m=async e=>{try{let{userId:t,newUsername:s}=await e.json();if(await (0,u.Z)(),!t||!s)return new d.NextResponse(JSON.stringify({message:"ID or new username not found"}),{status:400});if(!p.Types.ObjectId.isValid(t))return new d.NextResponse(JSON.stringify({message:"Invalid User id"}),{status:400});let r=await o.Z.findOneAndUpdate({_id:new c(t)},{username:s},{new:!0});if(!r)return new d.NextResponse(JSON.stringify({message:"User not found in the database"}),{status:400});return new d.NextResponse(JSON.stringify({message:"User is updated",user:r}),{status:200})}catch(e){return new d.NextResponse("Error is updating user"+e.message,{status:500})}},w=async e=>{try{let{searchParams:t}=new URL(e.url),s=t.get("userId");if(!s)return new d.NextResponse(JSON.stringify({message:"ID  not found"}),{status:400});if(!p.Types.ObjectId.isValid(s))return new d.NextResponse(JSON.stringify({message:"Invalid User id"}),{status:400});await (0,u.Z)();let r=await o.Z.findByIdAndDelete(new p.Types.ObjectId(s));if(!r)return new d.NextResponse(JSON.stringify({message:"User not found in the database"}),{status:400});return new d.NextResponse(JSON.stringify({message:"User is deleted",user:r}),{status:200})}catch(e){return new d.NextResponse("Error in deleting user"+e.message,{status:500})}},f=new n.AppRouteRouteModule({definition:{kind:a.x.APP_ROUTE,page:"/api/(auth)/users/route",pathname:"/api/users",filename:"route",bundlePath:"app/api/(auth)/users/route"},resolvedPagePath:"E:\\rest-api-next.js\\app\\api\\(auth)\\users\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:y,staticGenerationAsyncStorage:N,serverHooks:x}=f,h="/api/(auth)/users/route";function O(){return(0,i.patchFetch)({serverHooks:x,staticGenerationAsyncStorage:N})}},9487:(e,t,s)=>{s.d(t,{Z:()=>i});var r=s(1185),n=s.n(r);let a=process.env.MONGODB_URI,i=async()=>{let e=n().connection.readyState;if(1===e){console.log("Already connected");return}if(2===e){console.log("Connecting...");return}try{n().connect(a,{dbName:"REST_APIs_with_Nextjs",bufferCommands:!0}),console.log("Connected")}catch(e){throw console.log("Error: ",e),Error("Error: ",e)}}},3591:(e,t,s)=>{s.d(t,{Z:()=>a});var r=s(1185);let n=new r.Schema({email:{type:"string",required:!0,unique:!0},username:{type:"string",required:!0,unique:!0},password:{type:"string",required:!0}},{timestamps:!0}),a=r.models.User||(0,r.model)("User",n)}};var t=require("../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[948,972],()=>s(6649));module.exports=r})();