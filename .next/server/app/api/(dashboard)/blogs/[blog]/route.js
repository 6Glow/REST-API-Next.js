"use strict";(()=>{var e={};e.id=499,e.ids=[499],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},2668:(e,s,t)=>{t.r(s),t.d(s,{originalPathname:()=>I,patchFetch:()=>O,requestAsyncStorage:()=>w,routeModule:()=>f,serverHooks:()=>b,staticGenerationAsyncStorage:()=>N});var r={};t.r(r),t.d(r,{DELETE:()=>c,GET:()=>m,PATCH:()=>y});var n=t(9303),i=t(8716),a=t(670),o=t(9487),d=t(7070),u=t(1185),g=t(3591),l=t(4063),p=t(4479);let m=async(e,s)=>{let t=s.params.blog;try{let{searchParams:s}=new URL(e.url),r=s.get("userId"),n=s.get("categoryId");if(!r||!u.Types.ObjectId.isValid(r))return new d.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(!n||!u.Types.ObjectId.isValid(n))return new d.NextResponse(JSON.stringify({message:"Invalid or missing categoryId"}),{status:400});if(!t||!u.Types.ObjectId.isValid(t))return new d.NextResponse(JSON.stringify({message:"Invalid or missing blogId"}),{status:400});if(await (0,o.Z)(),!await g.Z.findById(r))return new d.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(!await l.Z.findById(n))return new d.NextResponse(JSON.stringify({message:"Category not found"}),{status:404});let i=await p.Z.findOne({_id:t,user:r,category:n});if(!i)return new d.NextResponse(JSON.stringify({message:"Blog not found"}),{status:404});return new d.NextResponse(JSON.stringify({blog:i}),{status:200})}catch(e){return new d.NextResponse("Error in fetching a blog "+e.message,{status:500})}},y=async(e,s)=>{let t=s.params.blog;try{let{title:s,description:r}=await e.json(),{searchParams:n}=new URL(e.url),i=n.get("userId");if(!i||!u.Types.ObjectId.isValid(i))return new d.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(!t||!u.Types.ObjectId.isValid(t))return new d.NextResponse(JSON.stringify({message:"Invalid or missing blogId"}),{status:400});if(await (0,o.Z)(),!await g.Z.findById(i))return new d.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(!await p.Z.findOne({_id:t,user:i}))return new d.NextResponse(JSON.stringify({message:"Blog not found"}),{status:404});let a=await p.Z.findByIdAndUpdate(t,{title:s,description:r},{new:!0});return new d.NextResponse(JSON.stringify({message:"Blog updated",blog:a}),{status:200})}catch(e){return new d.NextResponse("Error in updating blog "+e.message,{status:500})}},c=async(e,s)=>{let t=s.params.blog;try{let{searchParams:s}=new URL(e.url),r=s.get("userId");if(!r||!u.Types.ObjectId.isValid(r))return new d.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(!t||!u.Types.ObjectId.isValid(t))return new d.NextResponse(JSON.stringify({message:"Invalid or missing blogId"}),{status:400});if(await (0,o.Z)(),!await g.Z.findById(r))return new d.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(!await p.Z.findOne({_id:t,user:r}))return new d.NextResponse(JSON.stringify({message:"Blog not found"}),{status:404});return await p.Z.findByIdAndDelete(t),new d.NextResponse(JSON.stringify({message:"Blog is deleted"}),{status:200})}catch(e){return new d.NextResponse("Error in updating blog "+e.message,{status:500})}},f=new n.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/(dashboard)/blogs/[blog]/route",pathname:"/api/blogs/[blog]",filename:"route",bundlePath:"app/api/(dashboard)/blogs/[blog]/route"},resolvedPagePath:"E:\\rest-api-next.js\\app\\api\\(dashboard)\\blogs\\[blog]\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:w,staticGenerationAsyncStorage:N,serverHooks:b}=f,I="/api/(dashboard)/blogs/[blog]/route";function O(){return(0,a.patchFetch)({serverHooks:b,staticGenerationAsyncStorage:N})}},9487:(e,s,t)=>{t.d(s,{Z:()=>a});var r=t(1185),n=t.n(r);let i=process.env.MONGODB_URI,a=async()=>{let e=n().connection.readyState;if(1===e){console.log("Already connected");return}if(2===e){console.log("Connecting...");return}try{n().connect(i,{dbName:"REST_APIs_with_Nextjs",bufferCommands:!0}),console.log("Connected")}catch(e){throw console.log("Error: ",e),Error("Error: ",e)}}},4479:(e,s,t)=>{t.d(s,{Z:()=>i});var r=t(1185);let n=new r.Schema({title:{type:"string",required:!0},description:{type:"string"},user:{type:r.Schema.Types.ObjectId,ref:"User"},category:{type:r.Schema.Types.ObjectId,ref:"Category"}},{timestamps:!0}),i=r.models.Blog||(0,r.model)("Blog",n)},4063:(e,s,t)=>{t.d(s,{Z:()=>i});var r=t(1185);let n=new r.Schema({title:{type:"string",required:!0},user:{type:r.Schema.Types.ObjectId,ref:"User"}},{timestamps:!0}),i=r.models.Category||(0,r.model)("Category",n)},3591:(e,s,t)=>{t.d(s,{Z:()=>i});var r=t(1185);let n=new r.Schema({email:{type:"string",required:!0,unique:!0},username:{type:"string",required:!0,unique:!0},password:{type:"string",required:!0}},{timestamps:!0}),i=r.models.User||(0,r.model)("User",n)}};var s=require("../../../../../webpack-runtime.js");s.C(e);var t=e=>s(s.s=e),r=s.X(0,[948,972],()=>t(2668));module.exports=r})();