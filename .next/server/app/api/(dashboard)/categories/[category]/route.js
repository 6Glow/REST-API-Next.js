"use strict";(()=>{var e={};e.id=645,e.ids=[645],e.modules={1185:e=>{e.exports=require("mongoose")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4386:(e,t,s)=>{s.r(t),s.d(t,{originalPathname:()=>N,patchFetch:()=>x,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>w,staticGenerationAsyncStorage:()=>f});var r={};s.r(r),s.d(r,{DELETE:()=>y,PATCH:()=>c});var a=s(9303),n=s(8716),i=s(670),o=s(9487),d=s(7070),u=s(1185),g=s(3591),p=s(4063);let c=async(e,t)=>{let s=t.params.category;try{let{title:t}=await e.json(),{searchParams:r}=new URL(e.url),a=r.get("userId");if(!a||!u.Types.ObjectId.isValid(a))return new d.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(!s||!u.Types.ObjectId.isValid(s))return new d.NextResponse(JSON.stringify({message:"Invalid or missing categoryId"}),{status:400});if(await (0,o.Z)(),!await g.Z.findById(a))return new d.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(await p.Z.findById({_id:s,user:a}),!s)return new d.NextResponse(JSON.stringify({message:"Category not found"}),{status:404});let n=await p.Z.findByIdAndUpdate(s,{title:t},{new:!0});return new d.NextResponse(JSON.stringify({message:"Category is update",category:n}),{status:200})}catch(e){return new d.NextResponse("Error in updating category"+e.message,{status:500})}},y=async(e,t)=>{let s=t.params.category;try{let{searchParams:t}=new URL(e.url),r=t.get("userId");if(!r||!u.Types.ObjectId.isValid(r))return new d.NextResponse(JSON.stringify({message:"Invalid or missing userId"}),{status:400});if(await (0,o.Z)(),!await g.Z.findById(r))return new d.NextResponse(JSON.stringify({message:"User not found"}),{status:404});if(!s||!u.Types.ObjectId.isValid(s))return new d.NextResponse(JSON.stringify({message:"Invalid or missing categoryId"}),{status:400});if(!await p.Z.findOne({_id:s,user:r}))return new d.NextResponse(JSON.stringify({message:"Category not found or does not belong to the user"}),{status:404});return await p.Z.findByIdAndDelete(s),new d.NextResponse(JSON.stringify({message:"Category is deleted"}),{status:200})}catch(e){return new d.NextResponse("Error in deleting category"+e.message,{status:500})}},l=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/(dashboard)/categories/[category]/route",pathname:"/api/categories/[category]",filename:"route",bundlePath:"app/api/(dashboard)/categories/[category]/route"},resolvedPagePath:"E:\\rest-api-next.js\\app\\api\\(dashboard)\\categories\\[category]\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:m,staticGenerationAsyncStorage:f,serverHooks:w}=l,N="/api/(dashboard)/categories/[category]/route";function x(){return(0,i.patchFetch)({serverHooks:w,staticGenerationAsyncStorage:f})}},9487:(e,t,s)=>{s.d(t,{Z:()=>i});var r=s(1185),a=s.n(r);let n=process.env.MONGODB_URI,i=async()=>{let e=a().connection.readyState;if(1===e){console.log("Already connected");return}if(2===e){console.log("Connecting...");return}try{a().connect(n,{dbName:"REST_APIs_with_Nextjs",bufferCommands:!0}),console.log("Connected")}catch(e){throw console.log("Error: ",e),Error("Error: ",e)}}},4063:(e,t,s)=>{s.d(t,{Z:()=>n});var r=s(1185);let a=new r.Schema({title:{type:"string",required:!0},user:{type:r.Schema.Types.ObjectId,ref:"User"}},{timestamps:!0}),n=r.models.Category||(0,r.model)("Category",a)},3591:(e,t,s)=>{s.d(t,{Z:()=>n});var r=s(1185);let a=new r.Schema({email:{type:"string",required:!0,unique:!0},username:{type:"string",required:!0,unique:!0},password:{type:"string",required:!0}},{timestamps:!0}),n=r.models.User||(0,r.model)("User",a)}};var t=require("../../../../../webpack-runtime.js");t.C(e);var s=e=>t(t.s=e),r=t.X(0,[948,972],()=>s(4386));module.exports=r})();